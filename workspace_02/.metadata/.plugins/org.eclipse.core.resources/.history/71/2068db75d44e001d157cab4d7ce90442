package com.naver.erp;

public class ttt {
	package com.naver.erp;

	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseBody;
	import org.springframework.web.servlet.ModelAndView;

	// url 주고로 접속하면 호출되는 자격을 가진 메소드들 소유한 [Controller 클래스] 선언하기 

	   //@Controller 라는 어노테이션을 붙임으로써 스프링 프레임 워크 객체를 생성하고 관리한다
	   //@Controller 라는 어노테이션을 붙임으로써 [컨트롤러 클래스] 임이 저장된다
	@Controller
	public class LoginController { //각 URL에 대응해 호출되는 자원 
	   
	   //가상 url 주소 /loginForm.do 로 접근하면 호출되는 메소드 선언 
	      //url 주소에 대응하여 호출되려면 메소드 앞에 @RequestMapping(value="포트번호 이후 가상의url 주소") 라는
	      //어노테이션이 붙어야 한다 
	   //<주의> @RequestMapping 이 붙은 메소드의 이름은 개발자 맘대로 지어도 되지만 
	   // 될수 있으면 항상 그 변수의 의미를 알수있게 줘야한다
	   
	   //@RequestMapping 이 붙은 메소드의 특징 
	      //가상 url 주소로 접근하면 호출된다.
	      //만약 메소드의 리턴형이 ModelAndView 객체라면 이 객체 안에는 DB연동 결과물과 호출할 jsp 페이지명이 저장되어있다
	      //!!!DB 연동 결과물은 필수는 아니다 없을수도 있다  하지만 jsp 페이지명은 반드시 들어가야한다
	      //이객체에 저장되는 db연동 결과물은 httpServletRequest 객체에도 저장된다
	      //이 메소드 호출 후 ModelAndView 객체가 리턴되면 스프링 프레임 워크 는 
	      //ModelAndView 객체에 저장된 jsp 페이지를 호출합니다
	      //jsp 페이지가 호출된 후 생성되는 html 이 웹브라우저 쪽으로 전송되어 실행되서 결과물을 보게 됩니다 
	      //jsp 페이지의 역할은 httpServletRequest 객체에 저장된 데이터를 꺼내서 jsp 페이지의 html 또는 js 코드 
	      //사이에 삽입 쳐발르는 것이다 
	      //     localhost:8081/loginForm.do 접속한다
	   @RequestMapping(value="/loginForm.do")
	   public ModelAndView loginForm(){   
	      
	      //ModelAndView 객체 생성하기 
	      ModelAndView mav= new ModelAndView();//db연동 결과물을 저장하거나 또는 호풀할 jsp 페이지를 저장 
	      
	      //DB연동 대략적 간접 지시 코드 
	      //ModelAndView 객체의 setViewName 메소드 호출하여 
	      //호출할 jsp 페이지 명을 문자로 저장하기 
	      //호출할 jsp 페이지 명 앞에 붙는 위치경로는 application.properties 에서
	      //spring.mvc.view.prefix=/WEB-INF/views/  에 설정한다
	      mav.setViewName("loginForm.jsp");   //호출 jsp 페이지
	      //mav.addObject("animal","코코넛");   //db연동 결과물    
	      //mav.addObject("animal2","하트");   
	      //System.out.println("허걱 접속 성공 성공");
	      return mav; 
	      
	   }
	   //가상주소 /loginPorc.do 로 접근하면 호출되는 메소드 선언
	   //메소드 앞에 
	   //@RequestMapping(~,~,produces="application/json;charset=UTF-8") 라고 하고
	   //@ResponseBody 가 붙으면 리턴하는 데이터가 클라이언트에게 전송된다 
	   //ModelAndView 객체를 리턴하면 jsp 를 호출하고
	   //그 jsp 페이지의 실행결과인 html 문서가 응답메세지에 저장되어 전송되지만
	   //@RequestMapping(~) 와 @ResponseBody 가 붙으면
	   //리턴하는 데이터가 json 형태로 응답메세지에 저장되어 전송된다
	               //hashmap 이면 json 으로 int 면 정수 arraylist 면 array 객체로 전송된다
	   @RequestMapping(
	         value="/loginProc.do"
	         ,method=RequestMethod.POST
	         ,produces="application/json;charset=UTF-8"
	         )
	   @ResponseBody
	   public int loginProc(
	         @RequestParam(value="mid") String mid
	         ,@RequestParam(value="pwd") String pwd
	   ){
	      System.out.println("mid=>" + mid);
	      System.out.println("pwd=>" + pwd);
	      
  if(mid!=null && pwd!=null) {
	  if( mid.equals("abc")&& pwd.equals("123")  ){
		  return 1;
	  }else {
		  return 0;
	  }
  }else {
	  return 0;
  }

	      //
	      //return 0;
	      
	   
	   

	}
}
