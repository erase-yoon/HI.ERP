package com.kh.erp.ad.notice;

import java.util.List;
import java.util.Map;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

// ---------------------------------------------------------------
// [adNoticeDAOadNoticeDAOImpl 클래스] 선언
// ---------------------------------------------------------------
 @Repository
public class AdNoticeDAOImpl{
	
	// ---------------------------------------------------------------
	// 속성변수 sqlSession에 SqlSessionTemplate 객체를 생성하여 저장
	// ---------------------------------------------------------------
	// @Autowired 어노테이션을 붙이면
	// 속성변수의 자료형에 맞는 SqlSessionTemplate 객체를 생성한 후
	// 객체의 메모리 위치 주소 값을 속성변수에 저장한다.
	// ---------------------------------------------------------------
	// SqlSessionTemplate 객체는 DB 연동 시 사용하는 객체이다.
	// xml 파일에 있는 SQL 구문을 읽어 DB에 SQL 명령을 내린 후
	// 그 결과값을 받아오는 객체이다.
	@Autowired
	private SqlSessionTemplate sqlSession;
	
	// [검색한 게시판 목록]을 리턴하는 메소드 선언
	public List<Map<String, String>> getadNoticeList(AdNoticeSearchDTO adNoticeSearchDTO){
		
		// SqlSessionTemplate 객체의 selectList 메소드 호출로
		// n행 m열 게시판 글을 List<Map<String, String>>으로 받아오기
		List<Map<String, String>> adNoticeList = this.sqlSession.selectList(
				
			// 실행할 SQL SELECT 구문의 위치 지정
			"com.kh.erp.ad.notice.ad.notice.adNoticeDAO.getadNoticeList"
			// SQL 구문의 위치 : *.xml 파일 내부
			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
			// <select id="getadNoticeList"> SELECT 구문 </select>
			// </mapper>
			
			// 실행할 SQL 구문에서 사용할 데이터 지정
			, adNoticeSearchDTO
		);
		
//		List<Map<String, String>> adNoticeList = new ArrayList<String, String>();
//		Map<String, String> map1 = new HashMap<String, String>();
//		map1.put("b_no", 1);
//		map1.put("subject", "제목1");
//		map1.put("content", "내용1");
//		adNoticeList.add(map1);
		
		return adNoticeList;
	}
	
	// [검색한 게시판 목록]의 총 개수를 리턴하는 메소드 선언
	public int getadNoticeListTotCnt(AdNoticeSearchDTO adNoticeSearchDTO) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [검색한 게시판 목록]의 총 개수를 얻는 SQL 구문을 실행하고 
		// 입력 성공한 행의 존재개수 얻기
		int getadNoticeListTotCnt = this.sqlSession.selectOne(
		// selectOne은 1행m열의 select 결과를 얻을 떄 사용하는 메소드이다.
			
			// 실행할 SQL SELECT 구문의 위치 지정
			"com.kh.erp.ad.notice.adNoticeDAO.getadNoticeListTotCnt"
			// SQL 구문의 위치 : *.xml 파일 내부
			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
			// <select id="getadNotice"> SELECT 구문 </select>
			// </mapper>
			
			// 실행할 SQL 구문에서 사용할 데이터 지정
			, adNoticeSearchDTO
		);
		
		return getadNoticeListTotCnt;
	}
	
	// [게시판 목록]의 총 개수를 리턴하는 메소드 선언
	public int getadNoticeListTotAllCnt(AdNoticeSearchDTO adNoticeSearchDTO) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [검색한 게시판 목록]의 총 개수를 얻는 SQL 구문을 실행하고 
		// 입력 성공한 행의 존재개수 얻기
		int getadNoticeListTotAllCnt = this.sqlSession.selectOne(
		// selectOne은 1행m열의 select 결과를 얻을 떄 사용하는 메소드이다.
			
			// 실행할 SQL SELECT 구문의 위치 지정
			"com.kh.erp.ad.notice.adNoticeDAO.getadNoticeListTotAllCnt"
			// SQL 구문의 위치 : *.xml 파일 내부
			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
			// <select id="getadNotice"> SELECT 구문 </select>
			// </mapper>
			
			// 실행할 SQL 구문에서 사용할 데이터 지정
			, adNoticeSearchDTO
		);
		
		return getadNoticeListTotAllCnt;
	}
	
	// [게시판 글 입력 후 적용될 행의 개수]를 리턴하는 메소드 선언
	public int insertadNotice(AdNoticeDTO adNoticeDTO){
		
		// SqlSessionTemplate 객체의 insert 메소드 호출로
		// 게시판 글을 입력하는 SQL 구문을 실행하고 입력 성공한 행의 개수 얻기
		int adNoticeRegCnt = sqlSession.insert(
				
			// 실행할 SQL INSERT 구문의 위치 지정
			"com.kh.erp.ad.notice.adNoticeDAO.insertadNotice"
			// SQL 구문의 위치 : *.xml 파일 내부
			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
			// <insert id="insertadNotice"> INSERT 구문 </insert>
			// </mapper>
				
			// 실행할 SQL 구문에서 사용할 데이터 지정
			, adNoticeDTO
		);
		
		return adNoticeRegCnt;
	}
	
	// 답글을 달 게시판의 모든 후손 글들의 
	// print_no를 1 업데이트 하는 메소드 선언
	public int updatePrintNoCnt(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 update 메소드 호출로
		// [수정 적용행]을 얻는 SQL 구문을 실행하고 수정 적용행 얻기
		int updatePrintNoCnt = this.sqlSession.update(
				
				// 실행할 SQL UPDATE 구문의 위치 지정
				"com.kh.erp.ad.notice.adNoticeDAO.updatePrintNoCnt"
				// SQL 구문의 위치 : *.xml 파일 내부
				// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
				// <update id="updateReadcount"> UPDATE 구문 </update>
				// </mapper>
					
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [수정 적용행] 리턴
		return updatePrintNoCnt;
		
	}
	
	// [게시판 글의 조회수 증가 및 수정행의 개수]를 리턴하는 메소드 선언
	public int updateReadcount(int b_no) {
		
		// SqlSessionTemplate 객체의 update 메소드 호출로
		// 게시판 글을 수정하는 SQL 구문을 실행하고 입력 성공한 행의 개수 얻기
		int updateCount = this.sqlSession.update(
				
				// 실행할 SQL UPDATE 구문의 위치 지정
				"com.kh.erp.ad.notice.adNoticeDAO.updateReadcount"
				// SQL 구문의 위치 : *.xml 파일 내부
				// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
				// <update id="updateReadcount"> UPDATE 구문 </update>
				// </mapper>
					
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, b_no
		);
		return updateCount;
		
	}
	
	// [1개의 게시판 글 정보]를 리턴하는 메소드 선언
	public AdNoticeDTO getadNotice(int b_no) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [1개 게시판 글 정보]를 얻는 SQL 구문을 실행하고 입력 성공한 행의 개수 얻기
		AdNoticeDTO adNotice = this.sqlSession.selectOne(
		// selectOne은 1행m열의 select 결과를 얻을 떄 사용하는 메소드이다.
			
			// 실행할 SQL SELECT 구문의 위치 지정
			"com.kh.erp.ad.notice.adNoticeDAO.getadNotice"
			// SQL 구문의 위치 : *.xml 파일 내부
			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
			// <select id="getadNotice"> SELECT 구문 </select>
			// </mapper>
			
			// 실행할 SQL 구문에서 사용할 데이터 지정
			, b_no
		);
		
		// [1개 게시판 글 정보] 리턴
		return adNotice;
	}
	
	// 수정할 게시판의 존재 개수를 리턴하는 메소드 선언
	public int getadNoticeCnt(int b_no) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [게시판의 존재 개수]를 얻는 SQL 구문을 실행하고 게시판의 존재 개수 얻기
		int adNoticeCnt = this.sqlSession.selectOne(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.getadNoticeCnt"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// getadNoticeCnt : mapper 태그 안의 <select id="adNoticeCnt" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, b_no
		);

		// [게시판의 존재 개수] 리턴
		return adNoticeCnt;
	}
	
	// 수정, 삭제할 게시판의 비밀번호 존재 개수를 리턴하는 메소드 선언
	public int getadNoticePwdCnt(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [비밀번호 존재 개수]를 얻는 SQL 구문을 실행하고 비밀번호 존재 개수 얻기
		int adNoticePwdCnt = this.sqlSession.selectOne(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.getadNoticePwdCnt"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// getadNoticePwdCnt : mapper 태그 안의 <select id="getadNoticePwdCnt" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [비밀번호 존재 개수] 리턴
		return adNoticePwdCnt;
	}
	
	// 게시판 수정 명령 후 수정 적용행의 개수를 리턴하는 메소드 선언
	public int updateadNotice(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 update 메소드 호출로
		// [수정 적용행]을 얻는 SQL 구문을 실행하고 수정 적용행 얻기
		int updateadNotice = this.sqlSession.update(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.updateadNotice"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// updateadNotice : mapper 태그 안의 <update id="updateadNotice" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [수정 적용행] 리턴
		return updateadNotice;
	}
	
	// 삭제할 게시판의 후손 글의 존재개수를 리턴하는 메소드 선언
	public int getadNoticeChildrenCnt(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 selectOne 메소드 호출로
		// [후손 글의 존재개수]를 얻는 SQL 구문을 실행하고 자식 글의 존재개수 얻기
		int getadNoticeChildrenCnt = this.sqlSession.selectOne(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.getadNoticeChildrenCnt"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// getadNoticeChildrenCnt : mapper 태그 안의 <select id="getadNoticeChildrenCnt" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [후손 글의 존재개수] 리턴
		return getadNoticeChildrenCnt;
	}
	
	// 후손 글이 있을 경우 제목, 내용을 비우는 메소드 선언
	public int updateadNoticeEmpty(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 update 메소드 호출로
		// [수정 적용행]을 얻는 SQL 구문을 실행하고 수정 적용행 얻기
		int updateadNoticeEmpty = this.sqlSession.update(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.updateadNoticeEmpty"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// updateadNoticeEmpty : mapper 태그 안의 <update id="updateadNoticeEmpty" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [수정 적용행] 리턴
		return updateadNoticeEmpty;
	}
	
	// 삭제될 게시글의 동생 글의 출력순서 번호를 1씩 감소시키는 메소드 선언
	public int updatePrintNoDown(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 update 메소드 호출로
		// [수정 적용행]을 얻는 SQL 구문을 실행하고 수정 적용행 얻기
		int updatePrintNoDown = this.sqlSession.update(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.updatePrintNoDown"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// updateadNoticeEmpty : mapper 태그 안의 <update id="updateadNoticeEmpty" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [수정 적용행] 리턴
		return updatePrintNoDown;
	}
	
	// 게시판 삭제 명령 후 삭제 적용행을 리턴하는 메소드 선언
	public int deleteadNotice(AdNoticeDTO adNoticeDTO) {
		
		// SqlSessionTemplate 객체의 delete 메소드 호출로
		// [삭제 적용행의 개수]를 얻는 SQL 구문을 실행하고 삭제 적용행 얻기
		int deleteadNotice = this.sqlSession.delete(

				// 실행할 [SQL 구문의 위치 문자]를 지정
				"com.kh.erp.ad.notice.adNoticeDAO.deleteadNotice"
				// com.kh.erp.ad.notice.adNoticeDAO : xml 파일의 mapper 태그 안의 namespace 값
				// deleteadNotice : mapper 태그 안의 <delete id="deleteadNotice" ~> 태그 안의 SQL 구문
				
				// 실행할 SQL 구문에서 사용할 데이터 지정
				, adNoticeDTO
		);
		
		// [삭제 적용행] 리턴
		return deleteadNotice;
	}
	
//	// 답글을 달 게시판의 모든 후손 글들의 
//	// print_no를 1 업데이트 하는 메소드 선언
//	public int updatePrintNo(int b_no) {
//		
//		// SqlSessionTemplate 객체의 update 메소드 호출로
//		// [수정 적용행]을 얻는 SQL 구문을 실행하고 수정 적용행 얻기
//		int updatePrintNo = this.sqlSession.update(
//				
//				// 실행할 SQL UPDATE 구문의 위치 지정
//				"com.kh.erp.ad.notice.adNoticeDAO.updatePrintNo"
//				// SQL 구문의 위치 : *.xml 파일 내부
//				// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
//				// <update id="updateReadcount"> UPDATE 구문 </update>
//				// </mapper>
//					
//				// 실행할 SQL 구문에서 사용할 데이터 지정
//				, b_no
//		);
//		
//		// [수정 적용행] 리턴
//		return updatePrintNo;
//		
//	}
//	
//	// [게시판 글 입력 후 적용될 행의 개수]를 리턴하는 메소드 선언
//	public int insertReplyadNotice(adNoticeDTO adNoticeDTO){
//		
//		// SqlSessionTemplate 객체의 selectList 메소드 호출로
//		// 게시판 글을 입력하는 SQL 구문을 실행하고 입력 성공한 행의 개수 얻기
//		int adNoticeReplyRegCnt = sqlSession.insert(
//				
//			// 실행할 SQL INSERT 구문의 위치 지정
//			"com.kh.erp.ad.notice.adNoticeDAO.insertReplyadNotice"
//			// SQL 구문의 위치 : *.xml 파일 내부
//			// <mapper namespace="com.kh.erp.ad.notice.adNoticeBAO">
//			// <insert id="insertadNotice"> INSERT 구문 </insert>
//			// </mapper>
//				
//			// 실행할 SQL 구문에서 사용할 데이터 지정
//			, adNoticeDTO
//		);
//		
//		return adNoticeReplyRegCnt;
//	}
	
	

}
