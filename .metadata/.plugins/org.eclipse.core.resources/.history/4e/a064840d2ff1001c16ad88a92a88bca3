// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// 소속 패키지 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
package com.naver.erp;

import com.google.erp.KBank;

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// KBank 클래스를 객체화하고 메소드를 호출하는 [KBankExe] 클래스 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
public class KBankExe {

	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	// JVM 이 가장 먼저 찾아서 자동으로 호출하는 main 메소드 선언
	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	public static void main(String[] args) {
		
		//***********************************************************************
		// KBank 객체의 메모리 위치 주소 값이 저장되는 변수 bank 선언하고
		// KBank 객체 생성하고, 객체의 메모리 위치 주소 값을 bank 변수에 저장하기
		//***********************************************************************
		// ---------------------------------------------------------------
		// <1> KBank 객체의 메모리 위치 주소 값을 저장할 변수 bank 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화 하기
		// <3> 객체의 생성자를 new 오른쪽 KBank(3000)로 호출하기
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 bank에 저장하기
		// ---------------------------------------------------------------
			// <1>은 KBank bank 의 해설
			// <2>~<4>은 new KBank(3000); 의 해설
			// <5>은 = 의 해설
		KBank bank = new KBank(3000);
		
		System.out.println("현재 저금 총액 : " + bank.getMoney());
		bank.add(3000);
		System.out.println("현재 저금 총액 : " + bank.getMoney());
		bank.minus(2500);
		System.out.println("현재 저금 총액 : " + bank.getMoney());		

	}

}

/* 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> import com.google.erp.KBank; 구문을 생략하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * 에러 발생 지점 : KBank bank = new KBank(3000);
 * ---------------------------------------------------------------
 * new에 의해 객체화 하는 클래스는 수입을 해야 한다.
 * import com.google.erp.KBank; 구문을 생략하면
 * KBank 클래스가 수입되지 않아 생성자를 찾을 수 없어 객체화가 불가능하다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서 public class KBank{ ~ }를 class KBank{ ~ }로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * 에러 발생 지점 : import com.google.erp.KBank;
 * KBank bank = new KBank(3000);
 * ---------------------------------------------------------------
 * 클래스 앞에 public이 없으면
 * 타 패키지의 타 클래스에서 import 구문으로 수입하는 것을 막는다.
 * 즉 타 패키지의 타 클래스에서 수입을 할 수 없다.
 * 현재 KBank 클래스 KBankExe 클래스는 다른 패키지에 있으므로
 * KBank 클래스 앞에 public이 없으면
 * KBank 클래스는 타 패키지 타 클래스에서 수입이 불가능하다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서
 * public KBank(int money){~}를
 * protected KBank(int money){~}또는
 * KBank(int money){~}또는
 * private KBank(int money){~}로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 3가지 경우 모두 에러 발생.
 * ---------------------------------------------------------------
 * 에러 발생 지점 : KBank bank = new KBank(3000);
 * ---------------------------------------------------------------
 * 타 패키지의 클래스를 수입한 후 new에 의해 생성자 찾기가 가능하려면
 * 생성자는 public만 붙어야 한다.
 * ---------------------------------------------------------------
 *    **********************					*************************
 *    a.b.c 패키지								d.e.f 패키지
 *    **********************					*************************
 * 		--------------------					-------------------------
 * 		Xxx 클래스								public이 붙은 Yyy 클래스
 * 		--------------------					-------------------------
 * 		~ 메소드(~){
 * 			~ new Yyy(~);	---------O-------->	public Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	protected Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	private Yyy(~){~}
 * 		}
 * 		--------------------					-------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서
 * public void add( int money ){~}를
 * protected void add( int money ){~}또는
 * void add( int money ){~}또는
 * private void add( int money ){~}로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 3가지 경우 모두 에러 발생.
 * ---------------------------------------------------------------
 * 에러 발생 지점 : KBank bank = new KBank(3000);
 * ---------------------------------------------------------------
 * protected, default, private이 붙은 메소드는 타 클래스에서 호출이 불가능하다.
 * ---------------------------------------------------------------
 * public이 붙은 메소드는 타 클래스에서 호출이 가능하다. 단, 수입성공, 객체화 성공 가정하에만 가능하다
 * ---------------------------------------------------------------
 *    *********************************************						*******************************
 *    a.b.c 패키지														d.e.f 패키지
 *    *********************************************						*******************************
 * 		-------------------------------------------						-------------------------------
 * 		Xxx 클래스														public이 붙은 Yyy 클래스
 * 		-------------------------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------O-------->	public 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	protected 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	private 리턴형 메소드명(~){~}
 * 		}
 * 		-------------------------------------------						-------------------------------
 */