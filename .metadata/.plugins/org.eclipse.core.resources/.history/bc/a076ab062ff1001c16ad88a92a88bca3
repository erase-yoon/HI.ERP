package com.naver.erp;

import com.google.erp.*;

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// Employee 클래스를 객체화하고 메소드를 호출할 목적의 [EmployeeExe] 클래스 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
public class EmployeeExe {
	
	// ---------------------------------------------------------------
	// JVM이 가장 먼저 찾아서 자동으로 호출하는 main 메소드 선언
	// ---------------------------------------------------------------
	public static void main(String[] args) {
		
		// ********************************************************************	
		// Dept 객체 생성하고 객체의 메모리 위치 주소 값을 얻어 dept 변수에 저장하기
		// ********************************************************************
		// ---------------------------------------------------------------
		// <1> Dept 객체의 메모리 위치 주소 값을 저장할 변수 dept 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화 하기
		// <3> 객체의 생성자를 new 오른쪽 Dept(~)로 호출하기
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 dept에 저장하기
		// ---------------------------------------------------------------
			// <1>은 Dept dept의 해설
			// <2>~<4>는 new Dept(int dep_no, String dep_name, String loc);의 해설
			// <5>는 =의 해설
		Dept dept = new Dept(10, "관리부", "서울");
		
		// ********************************************************************	
		// Dept 객체의 메소드 호출하여 원하는 작업하기
		// ********************************************************************
		// ---------------------------------------------------------------
		// Dept 객체의 메소드 호출로 얻은 데이터 출력하기
		// ---------------------------------------------------------------
		System.out.println("부서 번호 : " + dept.getDep_no());
		System.out.println("부서 이름 : " + dept.getDep_name());
		System.out.println("부서 위치 : " + dept.getLoc());
		System.out.println("-----------------------------------------------");
		// ---------------------------------------------------------------
		// Dept 객체의 메소드 호출로 객체의 속성변수 데이터 수정하기
		// ---------------------------------------------------------------
		dept.setDep_name("사업부");
		// ---------------------------------------------------------------
		// Employee 객체의 메소드 호출로 얻은 데이터 출력하기
		// ---------------------------------------------------------------
		System.out.println("부서 번호 : " + dept.getDep_no());
		System.out.println("부서 이름 : " + dept.getDep_name());
		System.out.println("부서 위치 : " + dept.getLoc());
		System.out.println("-----------------------------------------------");
		
		// ********************************************************************	
		// Employee 객체 생성하고 객체의 메모리 위치 주소 값을 얻어 employee 변수에 저장하기
		// ********************************************************************
		// ---------------------------------------------------------------
		// <1> Employee 객체의 메모리 위치 주소 값을 저장할 변수 employee 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화 하기
		// <3> 객체의 생성자를 new 오른쪽 Employee(~)로 호출하기
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 employee에 저장하기
		// ---------------------------------------------------------------
			// <1>은 Employee employee의 해설
			// <2>~<4>는 new Employee(enp_no, emp_name);의 해설
			// <5>는 =의 해설
		Employee employee = new Employee(1, "사오정", dept);
		 
		// Employee : 클래스명, 참조형 자료형
		// employee : 변수
		// = : 대입연산자
		// new : 생성자를 소유한 클래스 객체, 생성자 호출, 메모리 위치 주소값 리턴
		// Employee(1, "사오정", dept) : 생성자 호출
		
		// ********************************************************************	
		// Employee 객체의 메소드 호출하여 원하는 작업하기
		// ********************************************************************
		// ---------------------------------------------------------------
		// Employee 객체의 메소드 호출로 얻은 데이터 출력하기
		// ---------------------------------------------------------------
		System.out.println("직원 번호 : " + employee.getEmp_no());
		System.out.println("직원 명 : " + employee.getEmp_name());
		
		// ---------------------------------------------------------------
		// Employee 객체의 getDept() 메소드 호출로 return되는 Dept 객체의 메모리 위치 주소 값을 가지고
		// Dept 객체의 getDep_no() 메소드 호출하여 얻은 부서 번호 출력하기
			// 객체의 메소드 호출 형식 : 객체의 메모리 위치 주소값.메소드명(~)
		// ---------------------------------------------------------------
		System.out.println("부서 번호 : " + employee.getDept().getDep_no());
		// ---------------------------------------------------------------
		// Employee 객체의 getDept() 메소드 호출로 return되는 Dept 객체의 메모리 위치 주소 값을 가지고
		// Dept 객체의 getDep_name() 메소드 호출하여 얻은 부서 이름 출력하기
			// 객체의 메소드 호출 형식 : 객체의 메모리 위치 주소값.메소드명(~)
		// ---------------------------------------------------------------
		System.out.println("부서 이름 : " + employee.getDept().getDep_name());
		// ---------------------------------------------------------------
		// Employee 객체의 getDept() 메소드 호출로 return되는 Dept 객체의 메모리 위치 주소 값을 가지고
		// Dept 객체의 getLoc() 메소드 호출하여 얻은 부서 위치 출력하기
			// 객체의 메소드 호출 형식 : 객체의 메모리 위치 주소값.메소드명(~)
		// ---------------------------------------------------------------
		System.out.println("부서 위치 : " + employee.getDept().getLoc());
		System.out.println("-----------------------------------------------");
		
		// ---------------------------------------------------------------
		// Employee 객체의 메소드 호출로 객체의 속성변수 데이터 수정하기
		// ---------------------------------------------------------------
		employee.setEmp_name("저팔계");

		// ---------------------------------------------------------------
		// Employee 객체의 메소드 호출로 얻은 데이터 출력하기
		// ---------------------------------------------------------------
		System.out.println("직원 번호 : " + employee.getEmp_no());
		System.out.println("직원 명 : " + employee.getEmp_name());

	}

}
