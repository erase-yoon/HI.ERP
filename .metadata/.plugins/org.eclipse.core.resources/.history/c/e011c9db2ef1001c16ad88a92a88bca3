// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// 소속 패키지 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
package com.google.erp;

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// KBank 클래스를 객체화하고 메소드를 호출하는 [KBankExe] 클래스 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
public class KBankExe {

	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	// JVM 이 가장 먼저 찾아서 자동으로 호출하는 main 메소드 선언
	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	public static void main(String[] args) {
		
		// ***********************************************************************
		// KBank 객체의 메모리 위치 주소 값이 저장되는 변수 bank 선언하고
		// KBank 객체 생성하고, 객체의 메모리 위치 주소 값을 bank 변수에 저장하기
		// ***********************************************************************
		// ---------------------------------------------------------------
		// <1> KBank 객체의 메모리 위치 주소 값을 저장할 변수 bank 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화 하기
		// <3> 객체의 생성자를 new 오른쪽 KBank(3000)로 호출하기
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 bank에 저장하기
		// ---------------------------------------------------------------
			// <1>은 KBank bank 의 해설
			// <2>~<4>은 new KBank(3000); 의 해설
			// <5>은 = 의 해설
		KBank bank = new KBank(3000);
		
		System.out.println("현재 저금 총액 : " + bank.getMoney());
		bank.add(3000);
		System.out.println("현재 저금 총액 : " + bank.getMoney());
		bank.minus(2500);
		System.out.println("현재 저금 총액 : " + bank.getMoney());		

		System.out.println("===============================================");
		
		KBank bank2 = new KBank(5000);
		System.out.println("현재 저금 총액 : " + bank2.getMoney());
		bank2.add(700);
		System.out.println("현재 저금 총액 : " + bank2.getMoney());
		bank2.minus(1500);
		System.out.println("현재 저금 총액 : " + bank2.getMoney());	
		
	}

}
/* 
 * --------------------              --------------------
 * 		KBank 객체                        KBank 객체
 * --------------------              --------------------
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 * new KBank(3000) 객체화            new KBank(3000) 객체화
 * ********************************************************
 *                       KBank 클래스
 * ********************************************************
 *                           money
 * ********************************************************
 * 
 * 
 * ********************************************************
 *                           money
 * ********************************************************
 *         ⇧⇩                              ⇧⇩
 * --------------------              --------------------
 * 		KBank 객체                        KBank 객체
 * --------------------              --------------------
 * 
 * 
 * --------------------              --------------------
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 *          ⇧                                ⇧
 * new KBank(3000) 객체화            new KBank(3000) 객체화
 * ********************************************************
 *                       KBank 클래스
 * ********************************************************
 *                           money
 * ********************************************************
 * 
 * 
 */
/* 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> import com.google.erp.KBank; 가 없어도 KBank 클래스가 수입되는 이유는?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * 동일한 패키지의 타 클래스는 import 구문이 없어도 자동 수입된다.
 * 		-----------------------------
 * 		import 구문이 없어도 자동 수입되는 클래스
 * 		-----------------------------
 * 		동일한 패키지의 타 클래스
 * 		java.lang 패키지 안의 클래스
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서
 * public class KBank{ ~ } 를 class KBank{ ~ } 로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생 없음.
 * ---------------------------------------------------------------
 * 클래스 앞에 public이 없으면
 * 타 패키지의 타 클래스에서 import 구문으로 수입하는 것을 막는다.
 * 즉, 타 패키지의 타 클래스에서 수입을 할 수 없다.
 * 현재 KBank 클래스 KBankExe 클래스는 동일한 패키지에 있으므로
 * 클래스 앞에 public이 없어도 수입된다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank bank = new KBank(3000); 를 KBank bank = new KBank(); 로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생 없음.
 * ---------------------------------------------------------------
 * KBank bank = new KBank();에서
 * KBank()는 생성자로서
 * KBank() 생성자를 가진 클래스를 찾아 객체화 한 후
 * 생성자를 호출 할 예정이다.
 * 현재 수입된 클래스 중에 KBank() 호출을 감당할 클래스가 있다.
 * KBank 클래스이다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank bank = new KBank(3000); 를 KBank bank = new KBank(3000.5); 로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * KBank bank = new KBank(3000.5);에서
 * KBank(3000.5)는 생성자로서
 * KBank(3000.5) 생성자를 가진 클래스를 찾아 객체화 한 후
 * 생성자를 호출 할 예정이다.
 * 현재 수입된 클래스 중에 KBank(3000.5) 호출을 감당할 클래스가 없다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> bank.add( 3000 ) 를 bank.add( 3000.3 ) 로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * KBank 클래스의 add 메소드는
 * public void add( int money ){~}로 선언되어 있다.
 * 3000.3이 매개변수 int money로 전달되는데 매개변수 자료형이 int 이다.
 * 불가능한 일이다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서
 * public KBank(int money){~}를
 * protected KBank(int money){~}또는
 * KBank(int money){~}또는
 * private KBank(int money){~}로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * private이 붙을 때만 에러 발생.
 * ---------------------------------------------------------------
 * private이 붙을 때 에러 발생 지점 : KBankExe 클래스 내부의 KBank bank = new KBank(3000);
 * ---------------------------------------------------------------
 * private이 붙은 생성자는 타 클래스에서 new 에 의해 객체화 할 때
 * 찾을 수 없는 생성자된다. 그러므로 객체화가 불가능하다.
 * ---------------------------------------------------------------
 * private이 붙은 생성자는 동료 생성자만이 호출 가능하다.
 * ---------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서
 * public void add(int money){~}를
 * protected void add(int money){~}또는
 * void add(int money){~}또는
 * private void add(int money){~}로 수정하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * private이 붙을 때만 에러 발생.
 * ---------------------------------------------------------------
 * private이 붙을 때 에러 발생 지점 : KBankExe 클래스 내부의 bank.add(3000);
 * ---------------------------------------------------------------
 * private이 붙은 메소드는 타 클래스에서 호출이 불가능하다.
 * ---------------------------------------------------------------
 * private이 붙은 메소드는 동료 생성자/메소드/속성변수만이 호출 가능하다.
 * ---------------------------------------------------------------
 * 
 * ==============================================================================
 * [Xxx 클래스]와  [Yyy 클래스]가 서로 같은 패키지 소속일 경우
 * [Xxx 클래스] 내부에서 new 에 의한 [Yyy 클래스]의 생성자 찾기/호출하기
 * ==============================================================================
 * 
 *    *******************************************************************
 *    a.b.c 패키지
 *    *******************************************************************
 * 		--------------------					-------------------------
 * 		Xxx 클래스								Yyy 클래스
 * 		--------------------					-------------------------
 * 		~ 메소드(~){
 * 			~ new Yyy(~);	---------O-------->	public Yyy(~){~}
 * 			~ new Yyy(~);	---------O-------->	protected Yyy(~){~}
 * 			~ new Yyy(~);	---------O-------->	Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	private Yyy(~){~}
 * 		}
 * 		--------------------					-------------------------
 * 
 * ==============================================================================
 *   [Xxx 클래스]와  [Yyy 클래스]가 서로 다른 패키지 소속일 경우
 *   [Xxx 클래스] 내부에서 new 에 의한 [Yyy 클래스]의 생성자 찾기/호출하기
 * ==============================================================================
 * 
 *    **********************					*************************
 *    a.b.c 패키지								d.e.f 패키지
 *    **********************					*************************
 * 		--------------------					-------------------------
 * 		Xxx 클래스								public이 붙은 Yyy 클래스
 * 		--------------------					-------------------------
 * 		~ 메소드(~){
 * 			~ new Yyy(~);	---------O-------->	public Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	protected Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	private Yyy(~){~}
 * 		}
 * 		--------------------					-------------------------
 * 
 *    **********************					***************************
 *    a.b.c 패키지								d.e.f 패키지
 *    **********************					***************************
 * 		--------------------					---------------------------
 * 		Xxx 클래스								public이 안 붙은 Yyy 클래스
 * 		--------------------					---------------------------
 * 		~ 메소드(~){
 * 			~ new Yyy(~);	---------X-------->	public Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	protected Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	Yyy(~){~}
 * 			~ new Yyy(~);	---------X-------->	private Yyy(~){~}
 * 		}
 * 		--------------------					---------------------------
 * 
 * ==============================================================================
 * [Xxx 클래스]와  [Yyy 클래스]가 서로 같은 패키지 소속일 경우
 * [Xxx 클래스] 내부에서 [Yyy 클래스] 객체 생성 후 메소드 호출하기
 * ==============================================================================
 *    *************************************************************************************************
 *    a.b.c 패키지
 *    *************************************************************************************************
 * 		-------------------------------------------						-------------------------------
 * 		Xxx 클래스														Yyy 클래스
 * 		-------------------------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------O-------->	public 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------O-------->	protected 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------O-------->	리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	private 리턴형 메소드명(~){~}
 * 		}
 * 		-------------------------------------------						-------------------------------
 * 
 * ==============================================================================
 * [Xxx 클래스]와  [Yyy 클래스]가 서로 다른 패키지 소속일 경우
 * [Xxx 클래스] 내부에서 [Yyy 클래스] 객체 생성 후 메소드 호출하기
 * ==============================================================================
 *    *********************************************						*******************************
 *    a.b.c 패키지														d.e.f 패키지
 *    *********************************************						*******************************
 * 		-------------------------------------------						-------------------------------
 * 		Xxx 클래스														public이 붙은 Yyy 클래스
 * 		-------------------------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------O-------->	public 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	protected 리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	리턴형 메소드명(~){~}
 * 			Yyy 클래스를 객체 생성한 후 메소드 호출	---------X-------->	private 리턴형 메소드명(~){~}
 * 		}
 * 		-------------------------------------------						-------------------------------
 *    *******************************						*******************************
 *    a.b.c 패키지											d.e.f 패키지
 *    *******************************						*******************************
 * 		-----------------------------						-------------------------------
 * 		Xxx 클래스											public이 안붙은 Yyy 클래스
 * 		-----------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	public 리턴형 메소드명(~){~}
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	protected 리턴형 메소드명(~){~}
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	리턴형 메소드명(~){~}
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	private 리턴형 메소드명(~){~}
 * 		}
 * 		-----------------------------						-------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> Xxx 클래스 내부에서 Yyy 클래스의 abc 라는 메소드를 호출하고 싶다
 * 이 메소드에 public 이 붙었는데 이 메소드 호출이 실패 했다.
 * 호출 실패 이유를 모두 서술하시오
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <이유1> Xxx 클래스에서 Yyy 클래스의 수입 실패
 * <이유2> Xxx 클래스에서 Yyy 클래스의 수입은 성공하였으나 생성자를 찾지 못함.(객체화 실패)
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> KBank 클래스에서 public void add(int money){~}를
 * public void add(int money);로 수정하면? 즉 {~} 을 생략하면?
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * {~} 가 없는 메소드를 소유한 클래스는 클래스 이름 앞에 abstract를 붙여야 한다.
 * 즉 public abstract class KBank{~}로 선언해야 한다.
 * ---------------------------------------------------------------
 * abstract 가 붙은 클래스는 new 에 의한 객체화가 불가능하다.
 * {~} 가 없는 메소드 호출을 막기 위함이다.
 * --------------------------------------------------------------------
 * <참고>abstract 가 붙은 클래스를 추상 클래스라고 부른다.
 * --------------------------------------------------------------------
 * 
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * <문> main 메소드 마지막에 다음 코딩을 삽입하면?
 * System.out.println("현재 저금 총액 : " + bank.money);
 * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 * ---------------------------------------------------------------
 * 에러 발생.
 * ---------------------------------------------------------------
 * private이 붙은 속성변수는 타 클래스에서 호출이 불가능하다.
 * ---------------------------------------------------------------
 * private이 붙은 속성변수는 동료 생성자/메소드/속성변수만 호출 가능하다.
 * ---------------------------------------------------------------
 *    *****************************************************************************************************
 *    a.b.c 패키지
 *    *****************************************************************************************************
 * 		---------------------------------------------						-------------------------------
 * 		Xxx 클래스															Yyy 클래스
 * 		---------------------------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------O-------->	public 자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------O-------->	protected 자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------O-------->	자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------X-------->	private 자료형 속성변수
 * 		}
 * 		---------------------------------------------						-------------------------------
 * 
 *    ***********************************************						*******************************
 *    a.b.c 패키지															d.e.f 패키지
 *    ***********************************************						*******************************
 * 		---------------------------------------------						-------------------------------
 * 		Xxx 클래스															public이 붙은 Yyy 클래스
 * 		---------------------------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------O-------->	public 자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------X-------->	protected 자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------X-------->	자료형 속성변수
 * 			Yyy 클래스를 객체 생성한 후 속성변수 호출	---------X-------->	private 자료형 속성변수
 * 		}
 * 		---------------------------------------------						-------------------------------
 *    *******************************						*******************************
 *    a.b.c 패키지											d.e.f 패키지
 *    *******************************						*******************************
 * 		-----------------------------						-------------------------------
 * 		Xxx 클래스											public이 안붙은 Yyy 클래스
 * 		-----------------------------						-------------------------------
 * 		~ 메소드(~){
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	public 자료형 속성변수
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	protected 자료형 속성변수
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	자료형 속성변수
 * 			Yyy 클래스 객체 생성 실패	---------X-------->	private 자료형 속성변수
 * 		}
 * 		-----------------------------						-------------------------------
 */