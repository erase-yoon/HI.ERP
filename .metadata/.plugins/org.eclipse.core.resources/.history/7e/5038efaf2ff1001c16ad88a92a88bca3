// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// 소속 패키지 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
package net.daum.erp;

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// Bank 클래스를 객체화하고 메소드를 호출하는 [BankExe] 클래스 선언하기
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
public class BankExe_220616 {

	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	// JVM 이 가장 먼저 찾아서 자동으로 호출하는 main 메소드 선언
	// mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
	public static void main(String[] args) {
		
		// -----------------------------------------------
		// <1> HBank 객체의 메모리 위치 주소값을 저장할 변수 hbank 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화하기
		// 	이 때 메모리에 올라가는 클래스의 슈퍼클래스도 모두 메모리로 올라가 객체화된다.
		// 	현재 슈퍼클래스는 Bank 클래스 이므로 Bank 클래스도 메모리로 올라가 객체화된다.
		// <3> 객체의 생성자를 new 오른쪽 HBank( ) 로 호출하기
		// 	이 때 호출되는 생성자 내부의 첫 줄에는 반드시 슈퍼클래스를 호출하는 코딩이 나와야한다.
		// 	슈퍼클래스를 호출하는 코딩이 없다면 슈퍼클래스 중에 기본 생성자를 호출하는 코딩이 자동 삽입된다.
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 hbank 에 저장하기
		// -----------------------------------------------
			// <1>은 HBank hBank 의 해설
			// <2>~<4>는 new HBank(   ); 의 해설
			// <5>는 = 의 해설
		HBank hbank = new HBank();
		
		// ---------------------------------------------------------------------
		// HBank 객체의 메소드 호출하기
		// <주의> HBank 객체의 메소드 호출 시 메소드가 없으면 슈퍼클래스의 메소드를 호출한다.
		// ---------------------------------------------------------------------
		hbank.add(3000);
		hbank.minus(300);
		System.out.println("입,출금 후 은행 잔금 : " + hbank.getMoney());
		System.out.println("---------------------------------------------");
		
		// -----------------------------------------------
		// <1> KBank 객체의 메모리 위치 주소값을 저장할 변수 kbank 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화하기
		// 	이 때 메모리에 올라가는 클래스의 슈퍼클래스도 모두 메모리로 올라가 객체화된다.
		// 	현재 슈퍼클래스는 Bank 클래스 이므로 Bank 클래스도 메모리로 올라가 객체화된다.
		// <3> 객체의 생성자를 new 오른쪽 KBank( ) 로 호출하기
		// 	이 때 호출되는 생성자 내부의 첫 줄에는 반드시 슈퍼클래스를 호출하는 코딩이 나와야한다.
		// 	슈퍼클래스를 호출하는 코딩이 없다면 슈퍼클래스 중에 기본 생성자를 호출하는 코딩이 자동 삽입된다.
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 kbank 에 저장하기
		// -----------------------------------------------
			// <1>은 KBank kbank 의 해설
			// <2>~<4>는 new KBank(   ); 의 해설
			// <5>는 = 의 해설
		KBank kbank = new KBank();
		
		// ---------------------------------------------------------------------
		// KBank 객체의 메소드 호출하기
		// <주의> KBank 객체의 메소드 호출 시 메소드가 없으면 슈퍼클래스의 메소드를 호출한다.
		// ---------------------------------------------------------------------
		kbank.add(4000);
		kbank.minus(400);
		System.out.println("입,출금 후 은행 잔금 : " + kbank.getMoney());
		System.out.println("---------------------------------------------");
		
		// -----------------------------------------------
		// <1> WBank 객체의 메모리 위치 주소값을 저장할 변수 wbank 선언하기
		// <2> 수입한 클래스 중에 new 오른쪽 생성자 호출이 가능한 생성자를 가진 클래스를 찾아 복사해서 메모리에 올려 객체화하기
		// 	이 때 메모리에 올라가는 클래스의 슈퍼클래스도 모두 메모리로 올라가 객체화된다.
		// 	현재 슈퍼클래스는 Bank 클래스 이므로 Bank 클래스도 메모리로 올라가 객체화된다.
		// <3> 객체의 생성자를 new 오른쪽 WBank( ) 로 호출하기
		// 	이 때 호출되는 생성자 내부의 첫 줄에는 반드시 슈퍼클래스를 호출하는 코딩이 나와야한다.
		// 	슈퍼클래스를 호출하는 코딩이 없다면 슈퍼클래스 중에 기본 생성자를 호출하는 코딩이 자동 삽입된다.
		// <4> 객체의 메모리 위치 주소값을 리턴하기
		// <5> 리턴한 객체의 메모리 위치 주소값을 wbank 에 저장하기
		// -----------------------------------------------
			// <1>은 WBank hBank 의 해설
			// <2>~<4>는 new WBank(   ); 의 해설
			// <5>는 = 의 해설
		WBank wbank = new WBank();
		
		// ---------------------------------------------------------------------
		// WBank 객체의 메소드 호출하기
		// <주의> WBank 객체의 메소드 호출 시 메소드가 없으면 슈퍼클래스의 메소드를 호출한다.
		// ---------------------------------------------------------------------
		wbank.add(5000);
		wbank.minus(500);
		System.out.println("입,출금 후 은행 잔금 : " + wbank.getMoney());
		System.out.println("---------------------------------------------");
		System.out.println("모든 은행의 총 잔액 : " + (hbank.getMoney() + kbank.getMoney() + wbank.getMoney()));
		
	}

}
